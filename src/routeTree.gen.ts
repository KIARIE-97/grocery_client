/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProductdetailsRouteImport } from './routes/productdetails'
import { Route as ProductRouteImport } from './routes/product'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomepageRouteImport } from './routes/homepage'
import { Route as CustomerRouteImport } from './routes/customer'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AddstoreRouteImport } from './routes/addstore'
import { Route as AddproductRouteImport } from './routes/addproduct'
import { Route as AddcategoryRouteImport } from './routes/addcategory'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CustomerIndexRouteImport } from './routes/customer/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as CustomerOrderdetailRouteImport } from './routes/customer/orderdetail'
import { Route as CustomerMywalletRouteImport } from './routes/customer/mywallet'
import { Route as CustomerAddressRouteImport } from './routes/customer/address'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminStoresRouteImport } from './routes/admin/stores'
import { Route as AdminStoreownersRouteImport } from './routes/admin/storeowners'
import { Route as AdminProfileRouteImport } from './routes/admin/profile'
import { Route as AdminProductRouteImport } from './routes/admin/product'
import { Route as AdminOrdersRouteImport } from './routes/admin/orders'
import { Route as AdminDriversRouteImport } from './routes/admin/drivers'
import { Route as AdminCustomersRouteImport } from './routes/admin/customers'
import { Route as AdminCategoryRouteImport } from './routes/admin/category'

const ProductdetailsRoute = ProductdetailsRouteImport.update({
  id: '/productdetails',
  path: '/productdetails',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductRoute = ProductRouteImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomepageRoute = HomepageRouteImport.update({
  id: '/homepage',
  path: '/homepage',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerRoute = CustomerRouteImport.update({
  id: '/customer',
  path: '/customer',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AddstoreRoute = AddstoreRouteImport.update({
  id: '/addstore',
  path: '/addstore',
  getParentRoute: () => rootRouteImport,
} as any)
const AddproductRoute = AddproductRouteImport.update({
  id: '/addproduct',
  path: '/addproduct',
  getParentRoute: () => rootRouteImport,
} as any)
const AddcategoryRoute = AddcategoryRouteImport.update({
  id: '/addcategory',
  path: '/addcategory',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerIndexRoute = CustomerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CustomerRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerOrderdetailRoute = CustomerOrderdetailRouteImport.update({
  id: '/orderdetail',
  path: '/orderdetail',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerMywalletRoute = CustomerMywalletRouteImport.update({
  id: '/mywallet',
  path: '/mywallet',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerAddressRoute = CustomerAddressRouteImport.update({
  id: '/address',
  path: '/address',
  getParentRoute: () => CustomerRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminStoresRoute = AdminStoresRouteImport.update({
  id: '/stores',
  path: '/stores',
  getParentRoute: () => AdminRoute,
} as any)
const AdminStoreownersRoute = AdminStoreownersRouteImport.update({
  id: '/storeowners',
  path: '/storeowners',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProfileRoute = AdminProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProductRoute = AdminProductRouteImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOrdersRoute = AdminOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDriversRoute = AdminDriversRouteImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCustomersRoute = AdminCustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCategoryRoute = AdminCategoryRouteImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/addcategory': typeof AddcategoryRoute
  '/addproduct': typeof AddproductRoute
  '/addstore': typeof AddstoreRoute
  '/admin': typeof AdminRouteWithChildren
  '/customer': typeof CustomerRouteWithChildren
  '/homepage': typeof HomepageRoute
  '/login': typeof LoginRoute
  '/product': typeof ProductRoute
  '/productdetails': typeof ProductdetailsRoute
  '/admin/category': typeof AdminCategoryRoute
  '/admin/customers': typeof AdminCustomersRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/product': typeof AdminProductRoute
  '/admin/profile': typeof AdminProfileRoute
  '/admin/storeowners': typeof AdminStoreownersRoute
  '/admin/stores': typeof AdminStoresRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/customer/address': typeof CustomerAddressRoute
  '/customer/mywallet': typeof CustomerMywalletRoute
  '/customer/orderdetail': typeof CustomerOrderdetailRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/': typeof AdminIndexRoute
  '/customer/': typeof CustomerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/addcategory': typeof AddcategoryRoute
  '/addproduct': typeof AddproductRoute
  '/addstore': typeof AddstoreRoute
  '/homepage': typeof HomepageRoute
  '/login': typeof LoginRoute
  '/product': typeof ProductRoute
  '/productdetails': typeof ProductdetailsRoute
  '/admin/category': typeof AdminCategoryRoute
  '/admin/customers': typeof AdminCustomersRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/product': typeof AdminProductRoute
  '/admin/profile': typeof AdminProfileRoute
  '/admin/storeowners': typeof AdminStoreownersRoute
  '/admin/stores': typeof AdminStoresRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/customer/address': typeof CustomerAddressRoute
  '/customer/mywallet': typeof CustomerMywalletRoute
  '/customer/orderdetail': typeof CustomerOrderdetailRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin': typeof AdminIndexRoute
  '/customer': typeof CustomerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/addcategory': typeof AddcategoryRoute
  '/addproduct': typeof AddproductRoute
  '/addstore': typeof AddstoreRoute
  '/admin': typeof AdminRouteWithChildren
  '/customer': typeof CustomerRouteWithChildren
  '/homepage': typeof HomepageRoute
  '/login': typeof LoginRoute
  '/product': typeof ProductRoute
  '/productdetails': typeof ProductdetailsRoute
  '/admin/category': typeof AdminCategoryRoute
  '/admin/customers': typeof AdminCustomersRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/product': typeof AdminProductRoute
  '/admin/profile': typeof AdminProfileRoute
  '/admin/storeowners': typeof AdminStoreownersRoute
  '/admin/stores': typeof AdminStoresRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/customer/address': typeof CustomerAddressRoute
  '/customer/mywallet': typeof CustomerMywalletRoute
  '/customer/orderdetail': typeof CustomerOrderdetailRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/': typeof AdminIndexRoute
  '/customer/': typeof CustomerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/addcategory'
    | '/addproduct'
    | '/addstore'
    | '/admin'
    | '/customer'
    | '/homepage'
    | '/login'
    | '/product'
    | '/productdetails'
    | '/admin/category'
    | '/admin/customers'
    | '/admin/drivers'
    | '/admin/orders'
    | '/admin/product'
    | '/admin/profile'
    | '/admin/storeowners'
    | '/admin/stores'
    | '/auth/login'
    | '/auth/register'
    | '/customer/address'
    | '/customer/mywallet'
    | '/customer/orderdetail'
    | '/demo/tanstack-query'
    | '/admin/'
    | '/customer/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/addcategory'
    | '/addproduct'
    | '/addstore'
    | '/homepage'
    | '/login'
    | '/product'
    | '/productdetails'
    | '/admin/category'
    | '/admin/customers'
    | '/admin/drivers'
    | '/admin/orders'
    | '/admin/product'
    | '/admin/profile'
    | '/admin/storeowners'
    | '/admin/stores'
    | '/auth/login'
    | '/auth/register'
    | '/customer/address'
    | '/customer/mywallet'
    | '/customer/orderdetail'
    | '/demo/tanstack-query'
    | '/admin'
    | '/customer'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/addcategory'
    | '/addproduct'
    | '/addstore'
    | '/admin'
    | '/customer'
    | '/homepage'
    | '/login'
    | '/product'
    | '/productdetails'
    | '/admin/category'
    | '/admin/customers'
    | '/admin/drivers'
    | '/admin/orders'
    | '/admin/product'
    | '/admin/profile'
    | '/admin/storeowners'
    | '/admin/stores'
    | '/auth/login'
    | '/auth/register'
    | '/customer/address'
    | '/customer/mywallet'
    | '/customer/orderdetail'
    | '/demo/tanstack-query'
    | '/admin/'
    | '/customer/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AddcategoryRoute: typeof AddcategoryRoute
  AddproductRoute: typeof AddproductRoute
  AddstoreRoute: typeof AddstoreRoute
  AdminRoute: typeof AdminRouteWithChildren
  CustomerRoute: typeof CustomerRouteWithChildren
  HomepageRoute: typeof HomepageRoute
  LoginRoute: typeof LoginRoute
  ProductRoute: typeof ProductRoute
  ProductdetailsRoute: typeof ProductdetailsRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/productdetails': {
      id: '/productdetails'
      path: '/productdetails'
      fullPath: '/productdetails'
      preLoaderRoute: typeof ProductdetailsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/homepage': {
      id: '/homepage'
      path: '/homepage'
      fullPath: '/homepage'
      preLoaderRoute: typeof HomepageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer': {
      id: '/customer'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof CustomerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/addstore': {
      id: '/addstore'
      path: '/addstore'
      fullPath: '/addstore'
      preLoaderRoute: typeof AddstoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/addproduct': {
      id: '/addproduct'
      path: '/addproduct'
      fullPath: '/addproduct'
      preLoaderRoute: typeof AddproductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/addcategory': {
      id: '/addcategory'
      path: '/addcategory'
      fullPath: '/addcategory'
      preLoaderRoute: typeof AddcategoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer/': {
      id: '/customer/'
      path: '/'
      fullPath: '/customer/'
      preLoaderRoute: typeof CustomerIndexRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer/orderdetail': {
      id: '/customer/orderdetail'
      path: '/orderdetail'
      fullPath: '/customer/orderdetail'
      preLoaderRoute: typeof CustomerOrderdetailRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/mywallet': {
      id: '/customer/mywallet'
      path: '/mywallet'
      fullPath: '/customer/mywallet'
      preLoaderRoute: typeof CustomerMywalletRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/address': {
      id: '/customer/address'
      path: '/address'
      fullPath: '/customer/address'
      preLoaderRoute: typeof CustomerAddressRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/stores': {
      id: '/admin/stores'
      path: '/stores'
      fullPath: '/admin/stores'
      preLoaderRoute: typeof AdminStoresRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/storeowners': {
      id: '/admin/storeowners'
      path: '/storeowners'
      fullPath: '/admin/storeowners'
      preLoaderRoute: typeof AdminStoreownersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/profile': {
      id: '/admin/profile'
      path: '/profile'
      fullPath: '/admin/profile'
      preLoaderRoute: typeof AdminProfileRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/product': {
      id: '/admin/product'
      path: '/product'
      fullPath: '/admin/product'
      preLoaderRoute: typeof AdminProductRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/orders': {
      id: '/admin/orders'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/drivers': {
      id: '/admin/drivers'
      path: '/drivers'
      fullPath: '/admin/drivers'
      preLoaderRoute: typeof AdminDriversRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/customers': {
      id: '/admin/customers'
      path: '/customers'
      fullPath: '/admin/customers'
      preLoaderRoute: typeof AdminCustomersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/category': {
      id: '/admin/category'
      path: '/category'
      fullPath: '/admin/category'
      preLoaderRoute: typeof AdminCategoryRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminCategoryRoute: typeof AdminCategoryRoute
  AdminCustomersRoute: typeof AdminCustomersRoute
  AdminDriversRoute: typeof AdminDriversRoute
  AdminOrdersRoute: typeof AdminOrdersRoute
  AdminProductRoute: typeof AdminProductRoute
  AdminProfileRoute: typeof AdminProfileRoute
  AdminStoreownersRoute: typeof AdminStoreownersRoute
  AdminStoresRoute: typeof AdminStoresRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminCategoryRoute: AdminCategoryRoute,
  AdminCustomersRoute: AdminCustomersRoute,
  AdminDriversRoute: AdminDriversRoute,
  AdminOrdersRoute: AdminOrdersRoute,
  AdminProductRoute: AdminProductRoute,
  AdminProfileRoute: AdminProfileRoute,
  AdminStoreownersRoute: AdminStoreownersRoute,
  AdminStoresRoute: AdminStoresRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface CustomerRouteChildren {
  CustomerAddressRoute: typeof CustomerAddressRoute
  CustomerMywalletRoute: typeof CustomerMywalletRoute
  CustomerOrderdetailRoute: typeof CustomerOrderdetailRoute
  CustomerIndexRoute: typeof CustomerIndexRoute
}

const CustomerRouteChildren: CustomerRouteChildren = {
  CustomerAddressRoute: CustomerAddressRoute,
  CustomerMywalletRoute: CustomerMywalletRoute,
  CustomerOrderdetailRoute: CustomerOrderdetailRoute,
  CustomerIndexRoute: CustomerIndexRoute,
}

const CustomerRouteWithChildren = CustomerRoute._addFileChildren(
  CustomerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AddcategoryRoute: AddcategoryRoute,
  AddproductRoute: AddproductRoute,
  AddstoreRoute: AddstoreRoute,
  AdminRoute: AdminRouteWithChildren,
  CustomerRoute: CustomerRouteWithChildren,
  HomepageRoute: HomepageRoute,
  LoginRoute: LoginRoute,
  ProductRoute: ProductRoute,
  ProductdetailsRoute: ProductdetailsRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
